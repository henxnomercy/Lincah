// File utama compiler yang mengintegrasikan modul lexer, parser, codegen,
// serta modul aot_compiler, jit_compiler, dan shader_compiler.

modul compiler {
    // Impor modulâ€“modul compiler
    impor lexer        dari "../compiler/lexer.lich"
    impor parser       dari "../compiler/parser.lich"
    impor codegen      dari "../compiler/codegen.lich"
    impor aot_compiler dari "../compiler/aot_compiler.lich"
    impor jit_compiler dari "../compiler/jit_compiler.lich"
    impor shader_compiler dari "../compiler/shader_compiler.lich"

    fungsi compileSource(source: String, mode: String, target: String) -> Any {
        tokens = lexer.tokenize(source)
        ast = parser.parse(tokens)
        
        asmCode = codegen.generateAssembly(ast)
        
        jika (mode == "aot") {
            binary = aot_compiler.compile(source, target)
            kembalikan { binary: binary, asm: asmCode }
        } lain jika (mode == "jit") {
            jitFunc = jit_compiler.compileJIT(source)
            kembalikan { jitFunction: jitFunc, asm: asmCode }
        } lain jika (mode == "shader") {
            spirvBinary = shader_compiler.compileShader(source, target)
            kembalikan { spirv: spirvBinary }
        } lain {
            error("Mode kompilasi tidak valid: " + mode)
        }
    }

    fungsi main() {
        sourceCode = bacaFile("contoh.lich")
        
        hasil = compileSource(sourceCode, "aot", "x86_64")
        
        jika (hasil.binary != null) {
            tulisFile("output.bin", hasil.binary)
            cetak("Kompilasi AOT berhasil! Binary disimpan sebagai output.bin")
        }
        jika (hasil.asm != null) {
            tulisFile("output.asm", gabungBaris(hasil.asm))
            cetak("Assembly code berhasil dihasilkan dan disimpan sebagai output.asm")
        }

        //Extension
        hasilJIT = compileSource(sourceCode, "jit", "")        
        shaderSource = bacaFile("shader.vert")
        hasilShader = compileSource(shaderSource, "shader", "vertex")
        tulisFile("shader.spv", hasilShader.spirv)
    }
}

compiler.main()
