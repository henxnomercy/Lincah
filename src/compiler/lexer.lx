jenis TokenType = TEKS, ANGKA, ID, KUNCI, OPERATOR

kataKunci = ["nilai", "fungsi", "jika", "lain", "ulangi", "selama", "kembalikan"]
operatorDuaKarakter = ["==", "!=", "<=", ">="]

fungsi isWhitespace(ch) {
    kembalikan (ch == " " atau ch == "\n" atau ch == "\t")
}

fungsi tokenize(src) {
    pos = 1
    tokens = []
    panjangSrc = panjang(src)
    
    ulangi (pos <= panjangSrc) {
        ch = charAt(src, pos)
        
        // Lewati whitespace
        jika (isWhitespace(ch)) {
            pos += 1
            lanjutkan
        }
        
        // Token string: diapit oleh tanda kutip ganda
        jika (ch == "\"") {
            str = ""
            pos += 1  // Lewati tanda kutip pembuka
            selama (pos <= panjangSrc dan charAt(src, pos) != "\"") {
                str += charAt(src, pos)
                pos += 1
            }
            jika (pos > panjangSrc) error("String tidak tertutup")
            pos += 1  // Lewati tanda kutip penutup
            tambah(tokens, { type: "TEKS", value: str })
            lanjutkan
        }
        
        // Token angka: mendukung integer dan desimal
        jika (adalahAngka(ch)) {
            num = ""
            selama (pos <= panjangSrc dan (adalahAngka(charAt(src, pos)) atau charAt(src, pos) == ".")) {
                num += charAt(src, pos)
                pos += 1
            }
            tambah(tokens, { type: "ANGKA", value: num })
            lanjutkan
        }
        
        // Identifier atau keyword
        jika (adalahHuruf(ch)) {
            id = ""
            selama (pos <= panjangSrc dan (adalahHuruf(charAt(src, pos)) atau adalahAngka(charAt(src, pos)))) {
                id += charAt(src, pos)
                pos += 1
            }
            tipe = (id di kataKunci) ? "KUNCI" : "ID"
            tambah(tokens, { type: tipe, value: id })
            lanjutkan
        }
        
        // Operator dan simbol
        jika (adalahOperator(ch)) {
            op = charAt(src, pos)
            pos += 1
            // Cek kemungkinan operator dua karakter
            jika (pos <= panjangSrc) {
                duaChar = op + charAt(src, pos)
                jika (duaChar di operatorDuaKarakter) {
                    op = duaChar
                    pos += 1
                }
            }
            tambah(tokens, { type: "OPERATOR", value: op })
            lanjutkan
        }
        
        // Komentar: mulai dengan '#' hingga akhir baris
        jika (ch == "#") {
            selama (pos <= panjangSrc dan charAt(src, pos) != "\n") {
                pos += 1
            }
            lanjutkan
        }
        
        error("Karakter tidak dikenal: " + ch)
    }
    
    kembalikan tokens
}
