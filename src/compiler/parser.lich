struct AstNode {
    jenis: String,
    anak: [],
    nilai: any,
    posTerakhir: Int
}

fungsi parse(tokens) {
    pos = 0
    root = { jenis: "PROGRAM", anak: [], posTerakhir: 0 }
    
    selagi (pos < panjang(tokens)) {
        token = tokens[pos]
        
        jika (token.type == "KUNCI") {
            node = parseKeyword(tokens, pos)
            tambah(root.anak, node)
            pos = node.posTerakhir + 1
        } lain {
            node = parseEkspresi(tokens, pos)
            tambah(root.anak, node)
            pos = node.posTerakhir + 1
        }
    }
    
    root.posTerakhir = pos - 1
    kembalikan root
}

fungsi parseKeyword(tokens, pos) {
    token = tokens[pos]
    jika (token.value == "nilai") {
        kembalikan parseVariabel(tokens, pos)
    } lain jika (token.value == "fungsi") {
        kembalikan parseFungsi(tokens, pos)
    } lain jika (token.value == "jika") {
        kembalikan parseJika(tokens, pos)
    } lain jika (token.value == "selama") {
        kembalikan parseSelama(tokens, pos)
    }
    error("Kata kunci tidak dikenal: " + token.value)
}

fungsi parseVariabel(tokens, pos) {
    // Format: 'nilai' <ID> '=' <ekspresi>
    pos += 1  // Lewati 'nilai'
    jika (pos >= panjang(tokens)) error("Ekspektasi identifier setelah 'nilai'")
    id = tokens[pos].value
    pos += 1  // Lewati ID
    jika (tokens[pos].value != "=") error("Ekspektasi '=' setelah identifier " + id)
    pos += 1  // Lewati '='
    ekspresi = parseEkspresi(tokens, pos)
    kembalikan { jenis: "VARIABEL", id: id, nilai: ekspresi, posTerakhir: ekspresi.posTerakhir }
}

fungsi parseFungsi(tokens, pos) {
    // Format: 'fungsi' <nama> '(' <parameter_list> ')' <block>
    pos += 1  // Lewati 'fungsi'
    jika (pos >= panjang(tokens)) error("Ekspektasi nama fungsi setelah 'fungsi'")
    nama = tokens[pos].value
    pos += 1  // Lewati nama fungsi
    parameter = []
    jika (tokens[pos].value != "(") error("Ekspektasi '(' setelah nama fungsi " + nama)
    pos += 1  // Lewati '('
    selagi (tokens[pos].value != ")") {
        tambah(parameter, tokens[pos].value)
        pos += 1
        jika (tokens[pos].value == ",") pos += 1
    }
    pos += 1  // Lewati ')'
    body = parseBlock(tokens, pos)
    kembalikan { jenis: "FUNGSI", nama: nama, parameter: parameter, body: body, posTerakhir: body.posTerakhir }
}

fungsi parseJika(tokens, pos) {
    // Format: 'jika' <kondisi> <block> ( 'lain' <block> )?
    pos += 1  // Lewati 'jika'
    kondisi = parseEkspresi(tokens, pos)
    pos = kondisi.posTerakhir + 1
    blokJika = parseBlock(tokens, pos)
    pos = blokJika.posTerakhir + 1
    blokLain = null
    jika (pos < panjang(tokens) dan tokens[pos].type == "KUNCI" dan tokens[pos].value == "lain") {
        pos += 1
        blokLain = parseBlock(tokens, pos)
        pos = blokLain.posTerakhir + 1
    }
    kembalikan { jenis: "JIKA", kondisi: kondisi, blokJika: blokJika, blokLain: blokLain, posTerakhir: pos - 1 }
}

fungsi parseSelama(tokens, pos) {
    // Format: 'selama' <kondisi> <block>
    pos += 1  // Lewati 'selama'
    kondisi = parseEkspresi(tokens, pos)
    pos = kondisi.posTerakhir + 1
    blok = parseBlock(tokens, pos)
    kembalikan { jenis: "SELAMA", kondisi: kondisi, blok: blok, posTerakhir: blok.posTerakhir }
}

fungsi parseEkspresi(tokens, pos) {
    // Placeholder: Parsing ekspresi sederhana.
    // Untuk ekspresi kompleks, gunakan teknik Recursive Descent atau algoritma Shunting Yard.
    token = tokens[pos]
    jika (token.type == "ANGKA") {
        kembalikan { jenis: "LITERAL", nilai: token.value, posTerakhir: pos }
    } lain jika (token.type == "ID") {
        kembalikan { jenis: "VARIABEL", id: token.value, posTerakhir: pos }
    }
    error("Ekspresi tidak dikenal pada token: " + token.value)
}

fungsi parseBlock(tokens, pos) {
    // Block diawali dengan '{' dan diakhiri dengan '}'
    jika (tokens[pos].value != "{") error("Ekspektasi '{' untuk memulai block")
    pos += 1  // Lewati '{'
    anak = []
    selagi (pos < panjang(tokens) dan tokens[pos].value != "}") {
        node = parse(tokens, pos)
        tambah(anak, node)
        pos = node.posTerakhir + 1
    }
    jika (pos >= panjang(tokens) atau tokens[pos].value != "}") error("Ekspektasi '}' untuk mengakhiri block")
    pos += 1  // Lewati '}'
    kembalikan { jenis: "BLOCK", anak: anak, posTerakhir: pos - 1 }
}
